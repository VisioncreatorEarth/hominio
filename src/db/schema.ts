import { pgTable, text, jsonb, timestamp, pgEnum, customType } from 'drizzle-orm/pg-core';

// Define custom BYTEA type
const bytea = customType<{ data: Buffer }>({
    dataType() {
        return 'bytea';
    },
    toDriver(value: unknown): Buffer {
        if (Buffer.isBuffer(value)) return value;
        if (value instanceof Uint8Array) return Buffer.from(value);
        // Handle arrays of numbers
        if (Array.isArray(value)) return Buffer.from(value);
        // Default fallback for other cases
        return Buffer.from([]);
    },
    fromDriver(value: unknown): Buffer {
        if (Buffer.isBuffer(value)) return value;
        return Buffer.from([]);
    }
});

// Type enum for content records (snapshot or update)
export const contentTypeEnum = pgEnum('content_type', ['snapshot', 'update']);

// Main document registry (like IPNS)
export const docs = pgTable('docs', {
    // Public key (similar to hypercore's public key)
    pubKey: text('pub_key').primaryKey(),

    // Latest snapshot CID
    snapshotCid: text('snapshot_cid').notNull(),

    // Array of update CIDs (as native PostgreSQL array)
    updateCids: text('update_cids').array().default([]),

    // Access control - owner's user ID (text to match BetterAuth's ID format)
    ownerId: text('owner_id').notNull(),

    // Document metadata
    title: text('title').notNull(),
    description: text('description'),

    // Timestamps
    createdAt: timestamp('created_at').notNull().defaultNow(),
    updatedAt: timestamp('updated_at').notNull().defaultNow()
});

// Content blocks (like IPFS immutable content)
export const content = pgTable('content', {
    // Content identifier (generated by hash-service)
    cid: text('cid').primaryKey(),

    // Type of content (snapshot or update)
    type: contentTypeEnum('type').notNull(),

    // Native binary data storage using PostgreSQL BYTEA type
    data: bytea('data').notNull(),

    // Optional metadata as JSON
    metadata: jsonb('metadata'),

    // Timestamp when this content was created
    createdAt: timestamp('created_at').notNull().defaultNow()
});

// Types for type safety
export type Doc = typeof docs.$inferSelect;
export type InsertDoc = typeof docs.$inferInsert;

export type Content = typeof content.$inferSelect;
export type InsertContent = typeof content.$inferInsert; 