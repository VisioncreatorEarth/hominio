import { loroService } from './loro-service';

/**
 * Service for generating and managing document IDs
 * Uses pubKey-style IDs (hex format) generated by loroService
 */
export class DocIdService {
    /**
     * Generate a document ID using loroService's pubKey generator
     * @returns A pubKey format document ID
     */
    generateDocId(): string {
        return loroService.generatePublicKey();
    }

    /**
     * Check if a string appears to be a pubKey-format ID
     * @param id The ID to check
     * @returns True if the ID matches pubKey format
     */
    isPubKeyFormat(id: string): boolean {
        // pubKeys are hex strings with a specific length
        return /^[0-9a-f]{64}$/i.test(id);
    }

    /**
     * Check if a string appears to be a UUID-format ID
     * @param id The ID to check
     * @returns True if the ID matches UUID format
     */
    isUuidFormat(id: string): boolean {
        // UUID regex pattern
        return /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(id);
    }

    /**
     * Convert a UUID to a pubKey-format ID
     * This is a deterministic conversion that maintains identity
     * @param uuid UUID to convert
     * @returns A pubKey-format ID derived from the UUID
     */
    uuidToPubKey(uuid: string): string {
        // Simple conversion: remove dashes and pad to 64 chars
        const base = uuid.replace(/-/g, '');
        // Pad to 64 chars with a repeating pattern based on the UUID
        return base.padEnd(64, base);
    }
}

// Export a singleton instance
export const docIdService = new DocIdService(); 